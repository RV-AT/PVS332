library verilog;
use verilog.vl_types.all;
entity au is
    generic(
        w8              : vl_logic_vector(0 to 2) := (Hi0, Hi0, Hi1);
        w16             : vl_logic_vector(0 to 2) := (Hi0, Hi1, Hi0);
        w32             : vl_logic_vector(0 to 2) := (Hi0, Hi1, Hi1);
        r8              : vl_logic_vector(0 to 2) := (Hi1, Hi0, Hi1);
        r16             : vl_logic_vector(0 to 2) := (Hi1, Hi1, Hi0);
        r32             : vl_logic_vector(0 to 2) := (Hi1, Hi1, Hi1);
        if0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        ex0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        mem0            : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        mem1            : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi0);
        ex1             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi1);
        wb              : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1);
        exc             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi1, Hi1)
    );
    port(
        clk             : in     vl_logic;
        rst             : in     vl_logic;
        statu_cpu       : in     vl_logic_vector(3 downto 0);
        opc_biu         : in     vl_logic_vector(2 downto 0);
        rdy_alu         : in     vl_logic;
        jalr            : in     vl_logic;
        jal             : in     vl_logic;
        beq             : in     vl_logic;
        bne             : in     vl_logic;
        blt             : in     vl_logic;
        bltu            : in     vl_logic;
        bge             : in     vl_logic;
        bgeu            : in     vl_logic;
        csrrw           : in     vl_logic;
        csrrs           : in     vl_logic;
        csrrc           : in     vl_logic;
        csrrwi          : in     vl_logic;
        csrrsi          : in     vl_logic;
        csrrci          : in     vl_logic;
        lr_w            : in     vl_logic;
        sc_w            : in     vl_logic;
        amoswap         : in     vl_logic;
        amoadd          : in     vl_logic;
        amoxor          : in     vl_logic;
        amoand          : in     vl_logic;
        amoor           : in     vl_logic;
        amomin          : in     vl_logic;
        amomax          : in     vl_logic;
        amominu         : in     vl_logic;
        amomaxu         : in     vl_logic;
        pc_jmp          : in     vl_logic;
        rs1_index       : in     vl_logic_vector(4 downto 0);
        rs1             : in     vl_logic_vector(31 downto 0);
        csr             : in     vl_logic_vector(31 downto 0);
        imm12           : in     vl_logic_vector(11 downto 0);
        imm20           : in     vl_logic_vector(19 downto 0);
        pc              : in     vl_logic_vector(31 downto 0);
        addr_csr        : out    vl_logic_vector(31 downto 0);
        pc_next         : out    vl_logic_vector(31 downto 0)
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of w8 : constant is 1;
    attribute mti_svvh_generic_type of w16 : constant is 1;
    attribute mti_svvh_generic_type of w32 : constant is 1;
    attribute mti_svvh_generic_type of r8 : constant is 1;
    attribute mti_svvh_generic_type of r16 : constant is 1;
    attribute mti_svvh_generic_type of r32 : constant is 1;
    attribute mti_svvh_generic_type of if0 : constant is 1;
    attribute mti_svvh_generic_type of ex0 : constant is 1;
    attribute mti_svvh_generic_type of mem0 : constant is 1;
    attribute mti_svvh_generic_type of mem1 : constant is 1;
    attribute mti_svvh_generic_type of ex1 : constant is 1;
    attribute mti_svvh_generic_type of wb : constant is 1;
    attribute mti_svvh_generic_type of exc : constant is 1;
end au;
