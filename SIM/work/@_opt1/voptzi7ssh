library verilog;
use verilog.vl_types.all;
entity csr_gpr_iu is
    generic(
        if0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        ex0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        mem0            : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        mem1            : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi0);
        ex1             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi1);
        wb              : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1);
        exc             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi1, Hi1);
        m               : vl_logic_vector(0 to 1) := (Hi1, Hi1);
        h               : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        s               : vl_logic_vector(0 to 1) := (Hi0, Hi1);
        u               : vl_logic_vector(0 to 1) := (Hi0, Hi0);
        if_ex_mem_wb    : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        if_ex_wb        : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        if_ex_mem_ex_mem_wb: vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1)
    );
    port(
        clk             : in     vl_logic;
        rst             : in     vl_logic;
        timer_int       : in     vl_logic;
        soft_int        : in     vl_logic;
        ext_int         : in     vl_logic;
        rdy_exu         : in     vl_logic;
        rdy_biu         : in     vl_logic;
        sum             : out    vl_logic;
        mxr             : out    vl_logic;
        satp            : out    vl_logic_vector(31 downto 0);
        pmp_addr        : in     vl_logic_vector(33 downto 0);
        pmp_chk_fault   : out    vl_logic;
        ins_addr_mis_in : in     vl_logic;
        ins_acc_fault_in: in     vl_logic;
        load_addr_mis_in: in     vl_logic;
        load_acc_fault_in: in     vl_logic;
        st_addr_mis_in  : in     vl_logic;
        st_acc_fault_in : in     vl_logic;
        ins_page_fault_in: in     vl_logic;
        ld_page_fault_in: in     vl_logic;
        st_page_fault_in: in     vl_logic;
        ins             : in     vl_logic_vector(31 downto 0);
        addr_biu        : in     vl_logic_vector(31 downto 0);
        statu_cpu       : out    vl_logic_vector(3 downto 0);
        msu             : out    vl_logic_vector(1 downto 0);
        pc              : out    vl_logic_vector(31 downto 0);
        addi            : out    vl_logic;
        slti            : out    vl_logic;
        sltiu           : out    vl_logic;
        andi            : out    vl_logic;
        ori             : out    vl_logic;
        xori            : out    vl_logic;
        slli            : out    vl_logic;
        srli            : out    vl_logic;
        srai            : out    vl_logic;
        lui             : out    vl_logic;
        auipc           : out    vl_logic;
        addp            : out    vl_logic;
        subp            : out    vl_logic;
        sltp            : out    vl_logic;
        sltup           : out    vl_logic;
        andp            : out    vl_logic;
        orp             : out    vl_logic;
        xorp            : out    vl_logic;
        sllp            : out    vl_logic;
        srlp            : out    vl_logic;
        srap            : out    vl_logic;
        jal             : out    vl_logic;
        jalr            : out    vl_logic;
        beq             : out    vl_logic;
        bne             : out    vl_logic;
        blt             : out    vl_logic;
        bltu            : out    vl_logic;
        bge             : out    vl_logic;
        bgeu            : out    vl_logic;
        lb              : out    vl_logic;
        lh              : out    vl_logic;
        csrrw           : out    vl_logic;
        csrrs           : out    vl_logic;
        csrrc           : out    vl_logic;
        csrrwi          : out    vl_logic;
        csrrsi          : out    vl_logic;
        csrrci          : out    vl_logic;
        lr_w            : out    vl_logic;
        sc_w            : out    vl_logic;
        amoswap         : out    vl_logic;
        amoadd          : out    vl_logic;
        amoxor          : out    vl_logic;
        amoand          : out    vl_logic;
        amoor           : out    vl_logic;
        amomin          : out    vl_logic;
        amomax          : out    vl_logic;
        amominu         : out    vl_logic;
        amomaxu         : out    vl_logic;
        rs1_index       : out    vl_logic_vector(4 downto 0);
        rs1             : out    vl_logic_vector(31 downto 0);
        rs2             : out    vl_logic_vector(31 downto 0);
        csr_out         : out    vl_logic_vector(31 downto 0);
        imm20           : out    vl_logic_vector(19 downto 0);
        imm12           : out    vl_logic_vector(11 downto 0);
        shamt           : out    vl_logic_vector(4 downto 0);
        csr_in          : in     vl_logic_vector(31 downto 0);
        data_gpr        : in     vl_logic_vector(31 downto 0);
        pc_next         : in     vl_logic_vector(31 downto 0);
        opc_biu         : out    vl_logic_vector(2 downto 0)
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of if0 : constant is 1;
    attribute mti_svvh_generic_type of ex0 : constant is 1;
    attribute mti_svvh_generic_type of mem0 : constant is 1;
    attribute mti_svvh_generic_type of mem1 : constant is 1;
    attribute mti_svvh_generic_type of ex1 : constant is 1;
    attribute mti_svvh_generic_type of wb : constant is 1;
    attribute mti_svvh_generic_type of exc : constant is 1;
    attribute mti_svvh_generic_type of m : constant is 1;
    attribute mti_svvh_generic_type of h : constant is 1;
    attribute mti_svvh_generic_type of s : constant is 1;
    attribute mti_svvh_generic_type of u : constant is 1;
    attribute mti_svvh_generic_type of if_ex_mem_wb : constant is 1;
    attribute mti_svvh_generic_type of if_ex_wb : constant is 1;
    attribute mti_svvh_generic_type of if_ex_mem_ex_mem_wb : constant is 1;
end csr_gpr_iu;
