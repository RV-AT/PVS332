library verilog;
use verilog.vl_types.all;
entity csr is
    generic(
        if0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi0);
        ex0             : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi0, Hi1);
        mem0            : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        mem1            : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi1, Hi0);
        ex1             : vl_logic_vector(0 to 3) := (Hi1, Hi0, Hi0, Hi1);
        wb              : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi1);
        exc             : vl_logic_vector(0 to 3) := (Hi1, Hi1, Hi1, Hi1);
        m               : vl_logic_vector(0 to 1) := (Hi1, Hi1);
        h               : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        s               : vl_logic_vector(0 to 1) := (Hi0, Hi1);
        u               : vl_logic_vector(0 to 1) := (Hi0, Hi0);
        mcycle_index    : vl_logic_vector(0 to 11) := (Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        minstret_index  : vl_logic_vector(0 to 11) := (Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        mstatus_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        medeleg_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        mideleg_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        mie_index       : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        mtvec_index     : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1);
        mscratch_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        mepc_index      : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        mcause_index    : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        mtval_index     : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        mip_index       : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        pmpcfg0_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0);
        pmpcfg1_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1);
        pmpcfg2_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi0);
        pmpcfg3_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi1);
        pmpaddr0_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0);
        pmpaddr1_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi1);
        pmpaddr2_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi1, Hi0);
        pmpaddr3_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0, Hi1, Hi1);
        sstatus_index   : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        sie_index       : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        stvec_index     : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1);
        sscratch_index  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        sepc_index      : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        scause_index    : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        stval_index     : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        sip_index       : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        satp_index      : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        usint           : integer := 134217728;
        ssint           : integer := 134217729;
        msint           : integer := 134217731;
        utint           : integer := 134217732;
        stint           : integer := 134217733;
        mtint           : integer := 134217735;
        ueint           : integer := 134217736;
        seint           : integer := 134217737;
        meint           : integer := 134217739;
        iam             : integer := 0;
        iaf             : integer := 1;
        ii              : integer := 2;
        bk              : integer := 3;
        lam             : integer := 4;
        laf             : integer := 5;
        sam             : integer := 6;
        saf             : integer := 7;
        ecu             : integer := 8;
        ecs             : integer := 9;
        ecm             : integer := 11;
        ipf             : integer := 12;
        lpf             : integer := 13;
        spf             : integer := 15;
        pc_rst          : integer := 0
    );
    port(
        clk             : in     vl_logic;
        rst             : in     vl_logic;
        statu_cpu       : in     vl_logic_vector(3 downto 0);
        pc              : out    vl_logic_vector(31 downto 0);
        msu             : out    vl_logic_vector(1 downto 0);
        pmp_addr        : in     vl_logic_vector(33 downto 0);
        pmp_chk_fault   : out    vl_logic;
        csr_out         : out    vl_logic_vector(31 downto 0);
        mxr             : out    vl_logic;
        sum             : out    vl_logic;
        mie_out         : out    vl_logic;
        sie_out         : out    vl_logic;
        medeleg_out     : out    vl_logic_vector(31 downto 0);
        mideleg_out     : out    vl_logic_vector(31 downto 0);
        meie_out        : out    vl_logic;
        seie_out        : out    vl_logic;
        mtie_out        : out    vl_logic;
        stie_out        : out    vl_logic;
        msie_out        : out    vl_logic;
        ssie_out        : out    vl_logic;
        ssip_out        : out    vl_logic;
        msip_out        : out    vl_logic;
        stip_out        : out    vl_logic;
        mtip_out        : out    vl_logic;
        seip_out        : out    vl_logic;
        meip_out        : out    vl_logic;
        priv_d          : in     vl_logic_vector(1 downto 0);
        cause           : in     vl_logic_vector(31 downto 0);
        tval            : in     vl_logic_vector(31 downto 0);
        tsr_out         : out    vl_logic;
        tvm_out         : out    vl_logic;
        satp_out        : out    vl_logic_vector(31 downto 0);
        csr_in          : in     vl_logic_vector(31 downto 0);
        csr_index       : in     vl_logic_vector(11 downto 0);
        pc_next         : in     vl_logic_vector(31 downto 0);
        csr_wr          : in     vl_logic;
        mtip_in         : in     vl_logic;
        mtip_wr         : in     vl_logic;
        meip_in         : in     vl_logic;
        meip_wr         : in     vl_logic;
        msip_in         : in     vl_logic;
        msip_wr         : in     vl_logic;
        stip_in         : in     vl_logic;
        stip_wr         : in     vl_logic;
        seip_in         : in     vl_logic;
        seip_wr         : in     vl_logic;
        ssip_in         : in     vl_logic;
        ssip_wr         : in     vl_logic;
        ret             : in     vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of if0 : constant is 1;
    attribute mti_svvh_generic_type of ex0 : constant is 1;
    attribute mti_svvh_generic_type of mem0 : constant is 1;
    attribute mti_svvh_generic_type of mem1 : constant is 1;
    attribute mti_svvh_generic_type of ex1 : constant is 1;
    attribute mti_svvh_generic_type of wb : constant is 1;
    attribute mti_svvh_generic_type of exc : constant is 1;
    attribute mti_svvh_generic_type of m : constant is 1;
    attribute mti_svvh_generic_type of h : constant is 1;
    attribute mti_svvh_generic_type of s : constant is 1;
    attribute mti_svvh_generic_type of u : constant is 1;
    attribute mti_svvh_generic_type of mcycle_index : constant is 1;
    attribute mti_svvh_generic_type of minstret_index : constant is 1;
    attribute mti_svvh_generic_type of mstatus_index : constant is 1;
    attribute mti_svvh_generic_type of medeleg_index : constant is 1;
    attribute mti_svvh_generic_type of mideleg_index : constant is 1;
    attribute mti_svvh_generic_type of mie_index : constant is 1;
    attribute mti_svvh_generic_type of mtvec_index : constant is 1;
    attribute mti_svvh_generic_type of mscratch_index : constant is 1;
    attribute mti_svvh_generic_type of mepc_index : constant is 1;
    attribute mti_svvh_generic_type of mcause_index : constant is 1;
    attribute mti_svvh_generic_type of mtval_index : constant is 1;
    attribute mti_svvh_generic_type of mip_index : constant is 1;
    attribute mti_svvh_generic_type of pmpcfg0_index : constant is 1;
    attribute mti_svvh_generic_type of pmpcfg1_index : constant is 1;
    attribute mti_svvh_generic_type of pmpcfg2_index : constant is 1;
    attribute mti_svvh_generic_type of pmpcfg3_index : constant is 1;
    attribute mti_svvh_generic_type of pmpaddr0_index : constant is 1;
    attribute mti_svvh_generic_type of pmpaddr1_index : constant is 1;
    attribute mti_svvh_generic_type of pmpaddr2_index : constant is 1;
    attribute mti_svvh_generic_type of pmpaddr3_index : constant is 1;
    attribute mti_svvh_generic_type of sstatus_index : constant is 1;
    attribute mti_svvh_generic_type of sie_index : constant is 1;
    attribute mti_svvh_generic_type of stvec_index : constant is 1;
    attribute mti_svvh_generic_type of sscratch_index : constant is 1;
    attribute mti_svvh_generic_type of sepc_index : constant is 1;
    attribute mti_svvh_generic_type of scause_index : constant is 1;
    attribute mti_svvh_generic_type of stval_index : constant is 1;
    attribute mti_svvh_generic_type of sip_index : constant is 1;
    attribute mti_svvh_generic_type of satp_index : constant is 1;
    attribute mti_svvh_generic_type of usint : constant is 1;
    attribute mti_svvh_generic_type of ssint : constant is 1;
    attribute mti_svvh_generic_type of msint : constant is 1;
    attribute mti_svvh_generic_type of utint : constant is 1;
    attribute mti_svvh_generic_type of stint : constant is 1;
    attribute mti_svvh_generic_type of mtint : constant is 1;
    attribute mti_svvh_generic_type of ueint : constant is 1;
    attribute mti_svvh_generic_type of seint : constant is 1;
    attribute mti_svvh_generic_type of meint : constant is 1;
    attribute mti_svvh_generic_type of iam : constant is 1;
    attribute mti_svvh_generic_type of iaf : constant is 1;
    attribute mti_svvh_generic_type of ii : constant is 1;
    attribute mti_svvh_generic_type of bk : constant is 1;
    attribute mti_svvh_generic_type of lam : constant is 1;
    attribute mti_svvh_generic_type of laf : constant is 1;
    attribute mti_svvh_generic_type of sam : constant is 1;
    attribute mti_svvh_generic_type of saf : constant is 1;
    attribute mti_svvh_generic_type of ecu : constant is 1;
    attribute mti_svvh_generic_type of ecs : constant is 1;
    attribute mti_svvh_generic_type of ecm : constant is 1;
    attribute mti_svvh_generic_type of ipf : constant is 1;
    attribute mti_svvh_generic_type of lpf : constant is 1;
    attribute mti_svvh_generic_type of spf : constant is 1;
    attribute mti_svvh_generic_type of pc_rst : constant is 1;
end csr;
